import { hello } from "./hello";
import { networkConnectLink } from "./helpers/constants.helper";
import { getNetworks } from "./helpers/get-networks.helper";
const { Telegraf, Markup, Scenes } = require("telegraf");
const axios = require("axios");

export async function wifi() {
  const nets = await getNetworks();
  const parsedNets = nets.map((v, index) => `*${index}.* ${v.ssid}`);

  const numberScene = new Scenes.BaseScene("numberScene");
  numberScene.enter((ctx: any) =>
    ctx.replyWithMarkdown(
      `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ç–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n${parsedNets.join("\n")}`,
      Markup.keyboard([["–û—Ç–º–µ–Ω–∞"]]).resize(),
      { parse_mode: "MarkdownV2" }
    )
  );

  numberScene.on("text", async (ctx: any) => {
    const userInput = ctx.message.text.toLowerCase();

    if (userInput === "–æ—Ç–º–µ–Ω–∞") {
      hello(ctx);
      return ctx.scene.leave();
    }

    try {
      const num = parseInt(userInput);
      if (num >= 0 && num < nets.length) {
        if (nets[num].isPublic) {
          try {
            const response = await axios.post(networkConnectLink, { num });
            const result = response.data;

            if (result == "ok") {
              ctx.reply("–í—ã —Å–º–æ–≥–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏!üéâ");
            } else {
              ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üòµ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);
            ctx.reply(
              "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            );
          }
        } else {
          ctx.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
          ctx.session.number = num;
          return ctx.scene.enter("passwordScene");
        }
      } else {
        ctx.reply("–ù–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ");
      }
    } catch (error) {
      ctx.reply("–ù–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ");
    }
  });

  const passwordScene = new Scenes.BaseScene("passwordScene");
  passwordScene.on("text", async (ctx: any) => {
    const { number } = ctx.session;
    const password = ctx.message.text;

    try {
      const response = await axios.post(networkConnectLink, {
        number,
        password,
      });
      const result = response.data;

      if (result == "ok") {
        ctx.reply("–í—ã —Å–º–æ–≥–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏!üéâ");
      } else {
        ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üòµ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    return ctx.scene.leave();
  });

  return [numberScene, passwordScene];
}
